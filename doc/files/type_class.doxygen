/**
\page mizuiro_type_class

\section type_class_introduction Type classes

A type class consists of a set of type functions and a set of value functions.
Type functions are used to determine which types the value functions operate
on. For example, a type function could answer the question which pointer type
to use for a const or a nonconst object and a value function could return a
pointer to the internal state of an object, using the type function to
determine the type of the result.

To allow more concrete syntax, we use simple type-theoretic notation:

A judgment is of the form \f$a : A\f$ and means that \f$a\f$ has type \f$A\f$.
We use \f$Type\f$ to denote all C++ types and write \f$A : Type\f$. Function
types are denoted as \f$A \to B\f$. Tuples are denoted as
\f$(T_1,\ldots,T_n)\f$. A list of arbitrary elements is denoted by \f$[T]\f$.
A type is a dependent type if it depends on a value. We write \f$a : A
\Rightarrow C(a)\f$ where \f$C\f$ is a context that uses \f$a\f$. The special
type \f$Bool\f$ is defined as \f$true, false : Bool\f$. It can be used to
denote a precondition as \f$b \Rightarrow A\f$ where \f$b :
Bool\f$. Finally, \f$r \leftarrow v\f$ denotes assignment of \f$v\f$ to
\f$r\f$.

Example:
\f{flalign*}{
const : &\, Constness \\
nonconst : &\, Constness \\
\mathrm{store} : &\, Constness \to Type \\
\mathrm{pointer} : &\, Constness \to Type \\
\mathrm{store\_data} : &\, cn : Constness \Rightarrow \mathrm{store}(cn) \to \mathrm{pointer}(cn) \\
\f}

\section type_class_implementation Implementing type classes

Type classes are designed to be extensible. They make use of tags in
combination with argument-dependent lookup. This way, it is possible to derive
from tags in order to reimplement parts of a type class.

Every type class is parameterized on a single type <code>I</code> called its
implementation. First of all, an implemtentation is associated with a tag,
called <code>T\<I\></code>. As mentioned earlier, it can derive from zero or
more tags, <code>T_1\<I\>, ..., T_n\<I\></code>. To get the tag
<code>T\<I\></code> of <code>I</code>, template specialization is used:
\code
template<typename C>
struct T
:
	T_1<C>, ..., T_n<C>
{};

template<>
struct make_tag_of<I> {
	typedef T<I> type;
};
\endcode
A type function \f$A \to Type\f$ is defined as:
\code
template<typename A>
using f
=
decltype
f_adl(
	declval<f_ns::tag>(),
	make_tag_of<I>(),
	declval<A>()
)
\endcode
<code>f_ns::tag</code> is a type residing in the special namespace
<code>f_ns</code> which is used to make the call to <code>f_adl</code> an ADL
call. This way, implementations of <code>f</code> can be found in the namespace
of <code>I</code>'s tag.

Similarly, a value function \f$ g : A \to B\f$ is defined as:
\code
template<typename A>
B g(A a)
{
	return
		g_adl(
			declval<f_ns::tag>(),
			make_tag_of<I>(),
			a
		);
}
\endcode
*/
